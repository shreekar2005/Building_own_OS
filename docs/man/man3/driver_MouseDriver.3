.TH "driver::MouseDriver" 3 "Fri Oct 24 2025 10:32:01" "OSOS - Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
driver::MouseDriver \- \fBDriver\fP for the PS/2 mouse, handling 3-byte packets and managing mouse state\&. @inherits \fBhardware_communication::InterruptHandler\fP @inherits \fBdriver::Driver\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'kmouse\&.hpp'\fP
.PP
Inherits \fBhardware_communication::InterruptHandler\fP, and \fBdriver::Driver\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMouseDriver\fP (\fBhardware_communication::InterruptManager\fP *\fBinterrupt_manager\fP, \fBMouseEventHandler\fP *\fBmouseEventHandler\fP)"
.br
.RI "Constructs a new \fBMouseDriver\fP object\&. "
.ti -1c
.RI "\fB~MouseDriver\fP ()"
.br
.RI "Destroys the \fBMouseDriver\fP object\&. "
.ti -1c
.RI "void \fBactivate\fP () override"
.br
.RI "Activates the mouse driver\&. "
.ti -1c
.RI "void \fBdeactivate\fP () override"
.br
.RI "Deactivates the mouse driver\&. (Stub) "
.ti -1c
.RI "uint32_t \fBhandleInterrupt\fP (uint32_t esp) override"
.br
.RI "Handles the mouse interrupt (IRQ 12)\&. "
.ti -1c
.RI "virtual uintptr_t \fBhandleInterrupt\fP (uintptr_t esp)=0"
.br
.ti -1c
.RI "int \fBreset\fP () override"
.br
.RI "Resets the mouse\&. (Stub) "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static uint16_t \fBmouse_block_video_mem_value\fP (uint16_t \fBold_char_under_mouse_pointer\fP, uint8_t mouse_pointer_color)"
.br
.RI "Calculates the video memory value for the mouse cursor block\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static int8_t \fB__mouse_x_\fP = \-1"
.br
.ti -1c
.RI "static int8_t \fB__mouse_y_\fP = \-1"
.br
.ti -1c
.RI "static uint16_t \fBold_char_under_mouse_pointer\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBInterruptManager\fP * \fBinterrupt_manager\fP"
.br
.ti -1c
.RI "uint8_t \fBinterruptNumber\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int8_t \fBbuffer\fP [3]"
.br
.ti -1c
.RI "uint8_t \fBbuttons\fP"
.br
.ti -1c
.RI "\fBhardware_communication::Port8Bit\fP \fBcommandPort\fP"
.br
.ti -1c
.RI "\fBhardware_communication::Port8Bit\fP \fBdataPort\fP"
.br
.ti -1c
.RI "\fBMouseEventHandler\fP * \fBmouseEventHandler\fP"
.br
.ti -1c
.RI "uint8_t \fBoffset\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBDriver\fP for the PS/2 mouse, handling 3-byte packets and managing mouse state\&. @inherits \fBhardware_communication::InterruptHandler\fP @inherits \fBdriver::Driver\fP\&. 
.PP
Definition at line \fB42\fP of file \fBkmouse\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "driver::MouseDriver::MouseDriver (\fBhardware_communication::InterruptManager\fP * interrupt_manager, \fBdriver::MouseEventHandler\fP * mouseEventHandler)"

.PP
Constructs a new \fBMouseDriver\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIinterrupt_manager\fP Pointer to the interrupt manager\&. 
.br
\fImouseEventHandler\fP Pointer to the event handler that will process mouse events\&. 
.RE
.PP

.PP
Definition at line \fB31\fP of file \fBkmouse\&.cpp\fP\&..PP
.nf
32 : hardware_communication::InterruptHandler(0x2C, interrupt_manager), 
33   dataPort(0x60), 
34   commandPort(0x64)
35 {
36     this\->mouseEventHandler = mouseEventHandler;
37 }
.fi

.PP
References \fBmouseEventHandler\fP\&.
.SS "driver::MouseDriver::~MouseDriver ()"

.PP
Destroys the \fBMouseDriver\fP object\&. 
.PP
Definition at line \fB40\fP of file \fBkmouse\&.cpp\fP\&..PP
.nf
40 {}
.fi

.SH "Member Function Documentation"
.PP 
.SS "void driver::MouseDriver::activate ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Activates the mouse driver\&. 
.PP
Implements \fBdriver::Driver\fP\&.
.PP
Definition at line \fB88\fP of file \fBkmouse\&.cpp\fP\&..PP
.nf
88                                 {
89     while(commandPort\&.read() & 1) dataPort\&.read();
90     offset = 0;
91     buttons = 0;
92     __mouse_x_ = 40;
93     __mouse_y_ = 12;
94 
95     static uint16_t* video_memory = (uint16_t*) 0xb8000;
96     old_char_under_mouse_pointer = video_memory[80 * __mouse_y_ + __mouse_x_];
97     video_memory[80 * __mouse_y_ + __mouse_x_] = mouse_block_video_mem_value(old_char_under_mouse_pointer, MOUSE_POINTER_COLOR);
98 
99     // Enable the auxiliary mouse device
100     commandPort\&.write(0xA8); 
101     
102     // Enable the interrupts for the mouse
103     commandPort\&.write(0x20); 
104     uint8_t status = (dataPort\&.read() | 2); 
105     commandPort\&.write(0x60);
106     dataPort\&.write(status);
107 
108     // Set mouse to use default settings and enable packet streaming
109     commandPort\&.write(0xD4);
110     dataPort\&.write(0xF4);
111     dataPort\&.read(); // Acknowledge
112     
113     basic::printf("Mouse Driver activated!\\n");
114 }
.fi

.PP
References \fBMOUSE_POINTER_COLOR\fP, and \fBbasic::printf()\fP\&.
.SS "void driver::MouseDriver::deactivate ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Deactivates the mouse driver\&. (Stub) 
.PP
Implements \fBdriver::Driver\fP\&.
.PP
Definition at line \fB120\fP of file \fBkmouse\&.cpp\fP\&..PP
.nf
120 {}
.fi

.SS "uint32_t driver::MouseDriver::handleInterrupt (uint32_t esp)\fC [override]\fP"

.PP
Handles the mouse interrupt (IRQ 12)\&. 
.PP
\fBParameters\fP
.RS 4
\fIesp\fP The stack pointer from the interrupt context\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The stack pointer\&. 
.RE
.PP

.PP
Definition at line \fB45\fP of file \fBkmouse\&.cpp\fP\&..PP
.nf
45                                                        {
46     // Check if the mouse has sent data
47     uint8_t status = commandPort\&.read();
48     if(!(status & 0x20)) return esp;
49     
50     // Read the next byte of the packet
51     buffer[offset] = dataPort\&.read();
52     offset = (offset + 1) % 3;
53 
54     // When a full 3\-byte packet is received
55     if(offset == 0){
56         if(mouseEventHandler == 0) return esp; // Do nothing without a handler
57 
58         // \-\-\- Handle Mouse Movement \-\-\-
59         int8_t delta_x = buffer[1];
60         int8_t delta_y = \-buffer[2]; // Y\-axis is inverted from the mouse's perspective
61 
62         if (delta_x != 0 || delta_y != 0) {
63             mouseEventHandler\->onMouseMove(delta_x, delta_y);
64         }
65 
66         // \-\-\- Handle Mouse Buttons \-\-\-
67         for(uint8_t i = 0; i < 3; i++) {
68             // Check if the state of button 'i' has changed
69             if((buffer[0] & (1 << i)) != (buttons & (1 << i))) {
70                 if(buffer[0] & (1 << i)) {
71                     mouseEventHandler\->onMouseDown(i + 1); // Left=1, Right=2, Middle=3
72                 } else {
73                     mouseEventHandler\->onMouseUp(i + 1);
74                 }
75             }
76         }
77         buttons = buffer[0]; // Save the current button state for the next interrupt
78     }
79 
80     return esp;
81 }
.fi

.PP
References \fBdriver::MouseEventHandler::onMouseMove()\fP\&.
.SS "virtual uintptr_t hardware_communication::InterruptHandler::handleInterrupt (uintptr_t esp)\fC [pure virtual]\fP, \fC [inherited]\fP"

.PP
Referenced by \fBhardware_communication::InterruptManager::handleInterrupt()\fP\&.
.SS "uint16_t driver::MouseDriver::mouse_block_video_mem_value (uint16_t current_char, uint8_t mouse_pointer_color)\fC [static]\fP"

.PP
Calculates the video memory value for the mouse cursor block\&. 
.PP
\fBParameters\fP
.RS 4
\fIcurrent_char\fP The original character attributes and ASCII value at the cursor position\&. 
.br
\fImouse_pointer_color\fP The desired background color for the mouse pointer\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The new 16-bit video memory value representing the character with the new background color\&. 
.RE
.PP

.PP
Definition at line \fB23\fP of file \fBkmouse\&.cpp\fP\&..PP
.nf
23                                                                                                          {
24     return (current_char & 0x0FFF) | (mouse_pointer_color << 12);
25 }
.fi

.PP
Referenced by \fBMouseEventHandler_for_kernel::onMouseMove()\fP, and \fBprintCharStr()\fP\&.
.SS "int driver::MouseDriver::reset ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Resets the mouse\&. (Stub) 
.PP
\fBReturns\fP
.RS 4
Always returns 0\&. 
.RE
.PP

.PP
Implements \fBdriver::Driver\fP\&.
.PP
Definition at line \fB118\fP of file \fBkmouse\&.cpp\fP\&..PP
.nf
118 {return 0;}
.fi

.SH "Member Data Documentation"
.PP 
.SS "int8_t driver::MouseDriver::__mouse_x_ = \-1\fC [static]\fP"

.PP
Definition at line \fB53\fP of file \fBkmouse\&.hpp\fP\&.
.PP
Referenced by \fBMouseEventHandler_for_kernel::onMouseDown()\fP, \fBMouseEventHandler_for_kernel::onMouseMove()\fP, and \fBprintCharStr()\fP\&.
.SS "int8_t driver::MouseDriver::__mouse_y_ = \-1\fC [static]\fP"

.PP
Definition at line \fB53\fP of file \fBkmouse\&.hpp\fP\&.
.PP
Referenced by \fBMouseEventHandler_for_kernel::onMouseDown()\fP, \fBMouseEventHandler_for_kernel::onMouseMove()\fP, and \fBprintCharStr()\fP\&.
.SS "int8_t driver::MouseDriver::buffer[3]\fC [private]\fP"

.PP
Definition at line \fB45\fP of file \fBkmouse\&.hpp\fP\&.
.SS "uint8_t driver::MouseDriver::buttons\fC [private]\fP"

.PP
Definition at line \fB47\fP of file \fBkmouse\&.hpp\fP\&.
.SS "\fBhardware_communication::Port8Bit\fP driver::MouseDriver::commandPort\fC [private]\fP"

.PP
Definition at line \fB44\fP of file \fBkmouse\&.hpp\fP\&.
.SS "\fBhardware_communication::Port8Bit\fP driver::MouseDriver::dataPort\fC [private]\fP"

.PP
Definition at line \fB43\fP of file \fBkmouse\&.hpp\fP\&.
.SS "\fBInterruptManager\fP* hardware_communication::InterruptHandler::interrupt_manager\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line \fB25\fP of file \fBkinterrupt\&.hpp\fP\&.
.PP
Referenced by \fBhardware_communication::InterruptHandler::InterruptHandler()\fP\&.
.SS "uint8_t hardware_communication::InterruptHandler::interruptNumber\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line \fB24\fP of file \fBkinterrupt\&.hpp\fP\&.
.PP
Referenced by \fBhardware_communication::InterruptHandler::InterruptHandler()\fP\&.
.SS "\fBMouseEventHandler\fP* driver::MouseDriver::mouseEventHandler\fC [private]\fP"

.PP
Definition at line \fB48\fP of file \fBkmouse\&.hpp\fP\&.
.PP
Referenced by \fBMouseDriver()\fP\&.
.SS "uint8_t driver::MouseDriver::offset\fC [private]\fP"

.PP
Definition at line \fB46\fP of file \fBkmouse\&.hpp\fP\&.
.SS "uint16_t driver::MouseDriver::old_char_under_mouse_pointer\fC [static]\fP"

.PP
Definition at line \fB51\fP of file \fBkmouse\&.hpp\fP\&.
.PP
Referenced by \fBMouseEventHandler_for_kernel::onMouseMove()\fP, and \fBprintCharStr()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OSOS - Documentation from the source code\&.
