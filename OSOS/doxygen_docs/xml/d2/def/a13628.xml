<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d2/def/a13628" kind="file" language="C++">
    <compoundname>kmemory.cpp</compoundname>
    <includes refid="d1/d53/a13676" local="yes">basic/kmemory.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>basic/kiostream.hpp</label>
        <link refid="d7/d3f/a13679"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>basic/kmemory.hpp</label>
        <link refid="d1/d53/a13676"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>basic/multiboot.hpp</label>
        <link refid="d2/da2/a13673"/>
      </node>
      <node id="6">
        <label>hardware_communication/kport.hpp</label>
        <link refid="d5/d96/a13685"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libk_src/basic/kmemory.cpp</label>
        <link refid="d2/def/a13628"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdarg</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="d2/def/a13628_1afa145befcf5e7b83424408ca503c8637" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete</definition>
        <argsstring>(void *ptr) noexcept</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/basic/kmemory.cpp" line="75" column="6" bodyfile="libk_src/basic/kmemory.cpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="d2/def/a13628_1af057efbdbcd21ea12954d49cd2d245c6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete</definition>
        <argsstring>(void *ptr, size_t size) noexcept</argsstring>
        <name>operator delete</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/basic/kmemory.cpp" line="79" column="6" bodyfile="libk_src/basic/kmemory.cpp" bodystart="79" bodyend="82"/>
        <references refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" compoundref="d2/da2/a13673" startline="0">size</references>
      </memberdef>
      <memberdef kind="function" id="d2/def/a13628_1a22aea74a1155aa798d6032da46da2391" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete[]</definition>
        <argsstring>(void *ptr) noexcept</argsstring>
        <name>operator delete[]</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/basic/kmemory.cpp" line="84" column="6" bodyfile="libk_src/basic/kmemory.cpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="d2/def/a13628_1ab26fe706b29fdeb33d5f6ead76c05815" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void operator delete[]</definition>
        <argsstring>(void *ptr, size_t size) noexcept</argsstring>
        <name>operator delete[]</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/basic/kmemory.cpp" line="88" column="6" bodyfile="libk_src/basic/kmemory.cpp" bodystart="88" bodyend="91"/>
        <references refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" compoundref="d2/da2/a13673" startline="0">size</references>
      </memberdef>
      <memberdef kind="function" id="d2/def/a13628_1a1a7f24760c8c7ad3bfcd54856d906fc2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * operator new</definition>
        <argsstring>(size_t size) noexcept</argsstring>
        <name>operator new</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>The compiler requires these functions to be defined to handle memory allocation and deallocation, especially for classes with virtual destructors. </para>
        </briefdescription>
        <detaileddescription>
<para>Since we are not linking the standard library, we must provide our own. For now, they don&apos;t have to do anything. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/basic/kmemory.cpp" line="65" column="6" bodyfile="libk_src/basic/kmemory.cpp" bodystart="65" bodyend="68"/>
        <references refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" compoundref="d2/da2/a13673" startline="0">size</references>
      </memberdef>
      <memberdef kind="function" id="d2/def/a13628_1aa75472ab4b765cf6f6b5b0ebcd4a28c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * operator new[]</definition>
        <argsstring>(size_t size) noexcept</argsstring>
        <name>operator new[]</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/basic/kmemory.cpp" line="70" column="6" bodyfile="libk_src/basic/kmemory.cpp" bodystart="70" bodyend="73"/>
        <references refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" compoundref="d2/da2/a13673" startline="0">size</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d53/a13676" kindref="compound">basic/kmemory.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="db/d8e/a13707_1a53c6425a55d9fb93998da01f2416f9ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d8e/a13707_1a53c6425a55d9fb93998da01f2416f9ad" kindref="member">basic::__printMemoryMap</ref>(multiboot_info_t<sp/>*mbi)</highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>memory<sp/>map<sp/>flag<sp/>is<sp/>set<sp/>(bit<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(mbi-&gt;flags<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>6)))<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d8e/a13707_1a45ee52b918a784ff0e96e7c8917a91d9" kindref="member">basic::printf</ref>(</highlight><highlight class="stringliteral">&quot;\nError:<sp/>Memory<sp/>map<sp/>not<sp/>provided<sp/>by<sp/>bootloader.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d8e/a13707_1a45ee52b918a784ff0e96e7c8917a91d9" kindref="member">basic::printf</ref>(</highlight><highlight class="stringliteral">&quot;\n---<sp/>System<sp/>Memory<sp/>Map<sp/>---\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>uint64_t<sp/>to<sp/>correctly<sp/>accumulate<sp/>total<sp/>memory<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>total_available_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>uintptr_t<sp/>for<sp/>pointer<sp/>arithmetic<sp/>to<sp/>ensure<sp/>portability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>mmap_start<sp/>=<sp/>mbi-&gt;mmap_addr;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>mmap_end<sp/>=<sp/>mbi-&gt;mmap_addr<sp/>+<sp/>mbi-&gt;mmap_length;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(multiboot_memory_map_t<sp/>*mmap<sp/>=<sp/>(multiboot_memory_map_t<sp/>*)mmap_start;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uintptr_t)mmap<sp/>&lt;<sp/>mmap_end;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmap<sp/>=<sp/>(multiboot_memory_map_t<sp/>*)((uintptr_t)mmap<sp/>+<sp/>mmap-&gt;size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mmap-&gt;size)))</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type_str;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mmap-&gt;type)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1a7fe141351ebcde0acbd6118ad0ea1a21" kindref="member">MULTIBOOT_MEMORY_AVAILABLE</ref>:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Available&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_available_bytes<sp/>+=<sp/>mmap-&gt;len;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1a0299aedc71e1f6707181471bafb18e7c" kindref="member">MULTIBOOT_MEMORY_RESERVED</ref>:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Reserved&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1af35be82586f332a561d00207c937ee57" kindref="member">MULTIBOOT_MEMORY_ACPI_RECLAIMABLE</ref>:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ACPI<sp/>Reclaimable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1a68f78286f7434d373a82f1b6f6473c72" kindref="member">MULTIBOOT_MEMORY_NVS</ref>:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NVS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1a1604ec18ac949d88dab993904b08c075" kindref="member">MULTIBOOT_MEMORY_BADRAM</ref>:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>RAM&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>%#llx<sp/>for<sp/>64-bit<sp/>hex<sp/>values<sp/>(address<sp/>and<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d8e/a13707_1a45ee52b918a784ff0e96e7c8917a91d9" kindref="member">basic::printf</ref>(</highlight><highlight class="stringliteral">&quot;Addr:<sp/>%#llx<sp/>|<sp/>Len:<sp/>%.2fKB<sp/>|<sp/>Type:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>mmap-&gt;addr,<sp/>mmap-&gt;len/1024.0,<sp/>type_str);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>floating<sp/>point<sp/>for<sp/>the<sp/>final<sp/>calculation<sp/>and<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_mb<sp/>=<sp/>total_available_bytes<sp/>/<sp/>1024.0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d8e/a13707_1a45ee52b918a784ff0e96e7c8917a91d9" kindref="member">basic::printf</ref>(</highlight><highlight class="stringliteral">&quot;Total<sp/>available<sp/>memory:<sp/>%.2f<sp/>KB\n\n&quot;</highlight><highlight class="normal">,<sp/>total_mb);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="d2/def/a13628_1a1a7f24760c8c7ad3bfcd54856d906fc2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" kindref="member">size</ref>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="d2/def/a13628_1aa75472ab4b765cf6f6b5b0ebcd4a28c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" kindref="member">size</ref>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="d2/def/a13628_1afa145befcf5e7b83424408ca503c8637" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)ptr;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="d2/def/a13628_1af057efbdbcd21ea12954d49cd2d245c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" kindref="member">size</ref>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)ptr;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="d2/def/a13628_1a22aea74a1155aa798d6032da46da2391" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)ptr;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="d2/def/a13628_1ab26fe706b29fdeb33d5f6ead76c05815" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" kindref="member">size</ref>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)ptr;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="d2/da2/a13673_1a6d813a0f2b5281b18dea3f4cda696c33" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="libk_src/basic/kmemory.cpp"/>
  </compounddef>
</doxygen>
