<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="dc/dcc/a18350" kind="file" language="C++">
    <compoundname>kicxxabi.cpp</compoundname>
    <includes refid="dc/de4/a18422" local="yes">essential/kicxxabi.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>basic/kiostream.hpp</label>
        <link refid="d3/d63/a18404"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>essential/kicxxabi.hpp</label>
        <link refid="dc/de4/a18422"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>hardware_communication/kport.hpp</label>
        <link refid="dc/d16/a18410"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libk_src/essential/kicxxabi.cpp</label>
        <link refid="dc/dcc/a18350"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdarg</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" prot="public" static="no" mutable="no">
        <type><ref refid="dc/de4/a18422_1a35fc01d4eba01f3f2ec636bd6b5ff34f" kindref="member">uarch_t</ref></type>
        <definition>uarch_t __atexit_func_count</definition>
        <argsstring></argsstring>
        <name>__atexit_func_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/essential/kicxxabi.cpp" line="25" column="9" bodyfile="libk_src/essential/kicxxabi.cpp" bodystart="25" bodyend="-1"/>
        <referencedby refid="dc/dcc/a18350_1a6870fb46accc462562647e3d99c0b7c7" compoundref="dc/dcc/a18350" startline="29" endline="37">__cxa_atexit</referencedby>
        <referencedby refid="d2/d7a/a18434_1a098e7240e26e869c035075be004b4ee9" compoundref="dc/dcc/a18350" startline="40" endline="117">essential::__cxa_finalize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" prot="public" static="no" mutable="no">
        <type><ref refid="d7/d5c/a19339" kindref="compound">essential::atexit_func_entry_t</ref></type>
        <definition>essential::atexit_func_entry_t __atexit_funcs[ATEXIT_MAX_FUNCS]</definition>
        <argsstring>[ATEXIT_MAX_FUNCS]</argsstring>
        <name>__atexit_funcs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/essential/kicxxabi.cpp" line="24" column="32" bodyfile="libk_src/essential/kicxxabi.cpp" bodystart="24" bodyend="-1"/>
        <referencedby refid="dc/dcc/a18350_1a6870fb46accc462562647e3d99c0b7c7" compoundref="dc/dcc/a18350" startline="29" endline="37">__cxa_atexit</referencedby>
        <referencedby refid="d2/d7a/a18434_1a098e7240e26e869c035075be004b4ee9" compoundref="dc/dcc/a18350" startline="40" endline="117">essential::__cxa_finalize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="dc/dcc/a18350_1a19df960d2907e9c08a720ae7683e632c" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* __dso_handle</definition>
        <argsstring></argsstring>
        <name>__dso_handle</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/essential/kicxxabi.cpp" line="27" column="6" bodyfile="libk_src/essential/kicxxabi.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/dcc/a18350_1a9a50b36f9886cd6bdbe05a5a6639cd95" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ctors_end) ()</definition>
        <argsstring>)()</argsstring>
        <name>ctors_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/essential/kicxxabi.cpp" line="5" column="12" bodyfile="libk_src/essential/kicxxabi.cpp" bodystart="5" bodyend="-1"/>
        <referencedby refid="d2/d7a/a18434_1a433c3d2d19d89890b522ac26b05fa7aa" compoundref="dc/dcc/a18350" startline="6" endline="11">essential::__callConstructors</referencedby>
      </memberdef>
      <memberdef kind="variable" id="dc/dcc/a18350_1a201d805094c80d48f8ee4e49ee85fb74" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ctors_start) ()</definition>
        <argsstring>)()</argsstring>
        <name>ctors_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/essential/kicxxabi.cpp" line="4" column="12" bodyfile="libk_src/essential/kicxxabi.cpp" bodystart="4" bodyend="-1"/>
        <referencedby refid="d2/d7a/a18434_1a433c3d2d19d89890b522ac26b05fa7aa" compoundref="dc/dcc/a18350" startline="6" endline="11">essential::__callConstructors</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="dc/dcc/a18350_1a6870fb46accc462562647e3d99c0b7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __cxa_atexit</definition>
        <argsstring>(void(*f)(void *), void *objptr, void *dso)</argsstring>
        <name>__cxa_atexit</name>
        <param>
          <type>void(*)(void *)</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>objptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dso</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libk_src/essential/kicxxabi.cpp" line="29" column="16" bodyfile="libk_src/essential/kicxxabi.cpp" bodystart="29" bodyend="37"/>
        <references refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" compoundref="dc/dcc/a18350" startline="25">__atexit_func_count</references>
        <references refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" compoundref="dc/dcc/a18350" startline="24">__atexit_funcs</references>
        <references refid="dc/de4/a18422_1ae07a9ad040d2fbefafcff363b77697ce" compoundref="dc/de4/a18422" startline="4">ATEXIT_MAX_FUNCS</references>
        <references refid="d7/d5c/a19339_1a665175c477008154e9b40ef96a8d81c2" compoundref="dc/de4/a18422" startline="14">essential::atexit_func_entry_t::destructor_func</references>
        <references refid="d7/d5c/a19339_1a98800f0ffd56e2dc77c46a741e1cf008" compoundref="dc/de4/a18422" startline="16">essential::atexit_func_entry_t::dso_handle</references>
        <references refid="d7/d5c/a19339_1a24ece443578ebec2449e72e998521a11" compoundref="dc/de4/a18422" startline="15">essential::atexit_func_entry_t::obj_ptr</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dc/de4/a18422" kindref="compound">essential/kicxxabi.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>call<sp/>constructors<sp/>of<sp/>global<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="dc/dcc/a18350_1a201d805094c80d48f8ee4e49ee85fb74" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="dc/dcc/a18350_1a201d805094c80d48f8ee4e49ee85fb74" kindref="member">ctors_start</ref>)();</highlight></codeline>
<codeline lineno="5" refid="dc/dcc/a18350_1a9a50b36f9886cd6bdbe05a5a6639cd95" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="dc/dcc/a18350_1a9a50b36f9886cd6bdbe05a5a6639cd95" kindref="member">ctors_end</ref>)();</highlight></codeline>
<codeline lineno="6" refid="d2/d7a/a18434_1a433c3d2d19d89890b522ac26b05fa7aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7a/a18434_1a433c3d2d19d89890b522ac26b05fa7aa" kindref="member">essential::__callConstructors</ref>(){</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**p)()<sp/>=<sp/>&amp;<ref refid="dc/dcc/a18350_1a201d805094c80d48f8ee4e49ee85fb74" kindref="member">ctors_start</ref>;<sp/>p<sp/>&lt;<sp/>&amp;<ref refid="dc/dcc/a18350_1a9a50b36f9886cd6bdbe05a5a6639cd95" kindref="member">ctors_end</ref>;<sp/>++p)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*p)();<sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>call<sp/>destructors<sp/>of<sp/>global<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>But<sp/>we<sp/>will<sp/>use<sp/>__cxa_finalize()<sp/>function<sp/>for<sp/>calling<sp/>destructors<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;<sp/>void(*dtors_start)();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;<sp/>void(*dtors_end)();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>__callDestructors(){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(void<sp/>(**p)()<sp/>=<sp/>&amp;dtors_start;<sp/>p<sp/>&lt;<sp/>&amp;dtors_end;<sp/>++p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*p)();<sp/>//<sp/>Call<sp/>the<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" refkind="member"><highlight class="normal"><ref refid="d7/d5c/a19339" kindref="compound">essential::atexit_func_entry_t</ref><sp/><ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[<ref refid="dc/de4/a18422_1ae07a9ad040d2fbefafcff363b77697ce" kindref="member">ATEXIT_MAX_FUNCS</ref>];</highlight></codeline>
<codeline lineno="25" refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" refkind="member"><highlight class="normal"><ref refid="dc/de4/a18422_1a35fc01d4eba01f3f2ec636bd6b5ff34f" kindref="member">uarch_t</ref><sp/><ref refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" kindref="member">__atexit_func_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="dc/dcc/a18350_1a19df960d2907e9c08a720ae7683e632c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="dc/dcc/a18350_1a19df960d2907e9c08a720ae7683e632c" kindref="member">__dso_handle</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//Attention!<sp/>Optimally,<sp/>you<sp/>should<sp/>remove<sp/>the<sp/>&apos;=<sp/>0&apos;<sp/>part<sp/>and<sp/>define<sp/>this<sp/>in<sp/>your<sp/>asm<sp/>script.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="dc/dcc/a18350_1a6870fb46accc462562647e3d99c0b7c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/dcc/a18350_1a6870fb46accc462562647e3d99c0b7c7" kindref="member">__cxa_atexit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*objptr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dso)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" kindref="member">__atexit_func_count</ref><sp/>&gt;=<sp/><ref refid="dc/de4/a18422_1ae07a9ad040d2fbefafcff363b77697ce" kindref="member">ATEXIT_MAX_FUNCS</ref>)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[<ref refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" kindref="member">__atexit_func_count</ref>].<ref refid="d7/d5c/a19339_1a665175c477008154e9b40ef96a8d81c2" kindref="member">destructor_func</ref><sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[<ref refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" kindref="member">__atexit_func_count</ref>].<ref refid="d7/d5c/a19339_1a24ece443578ebec2449e72e998521a11" kindref="member">obj_ptr</ref><sp/>=<sp/>objptr;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[<ref refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" kindref="member">__atexit_func_count</ref>].<ref refid="d7/d5c/a19339_1a98800f0ffd56e2dc77c46a741e1cf008" kindref="member">dso_handle</ref><sp/>=<sp/>dso;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" kindref="member">__atexit_func_count</ref>++;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*I<sp/>would<sp/>prefer<sp/>if<sp/>functions<sp/>returned<sp/>1<sp/>on<sp/>success,<sp/>but<sp/>the<sp/>ABI<sp/>says...*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>this<sp/>function,<sp/>then<sp/>every<sp/>global<sp/>destructor<sp/>will<sp/>be<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="d2/d7a/a18434_1a098e7240e26e869c035075be004b4ee9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d7a/a18434_1a098e7240e26e869c035075be004b4ee9" kindref="member">essential::__cxa_finalize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*f)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/de4/a18422_1a35fc01d4eba01f3f2ec636bd6b5ff34f" kindref="member">uarch_t</ref><sp/>i<sp/>=<sp/><ref refid="dc/dcc/a18350_1a0f75f529cf75cf0a9cd266f8d67675dc" kindref="member">__atexit_func_count</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>According<sp/>to<sp/>the<sp/>Itanium<sp/>C++<sp/>ABI,<sp/>if<sp/>essential::__cxa_finalize<sp/>is<sp/>called<sp/>without<sp/>a</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>function<sp/>ptr,<sp/>then<sp/>it<sp/>means<sp/>that<sp/>we<sp/>should<sp/>destroy<sp/>EVERYTHING<sp/>MUAHAHAHA!!</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>TODO:</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>well,<sp/>however,<sp/>that<sp/>deleting<sp/>a<sp/>function<sp/>from<sp/>here<sp/>that<sp/>contains<sp/>a<sp/>__dso_handle</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>means<sp/>that<sp/>one<sp/>link<sp/>to<sp/>a<sp/>shared<sp/>object<sp/>file<sp/>has<sp/>been<sp/>terminated.<sp/>In<sp/>other<sp/>words,</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>should<sp/>monitor<sp/>this<sp/>list<sp/>(optional,<sp/>of<sp/>course),<sp/>since<sp/>it<sp/>tells<sp/>us<sp/>how<sp/>many<sp/>links<sp/>to<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>an<sp/>object<sp/>file<sp/>exist<sp/>at<sp/>runtime<sp/>in<sp/>a<sp/>particular<sp/>application.<sp/>This<sp/>can<sp/>be<sp/>used<sp/>to<sp/>tell<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>when<sp/>a<sp/>shared<sp/>object<sp/>is<sp/>no<sp/>longer<sp/>in<sp/>use.<sp/>It<sp/>is<sp/>one<sp/>of<sp/>many<sp/>methods,<sp/>however.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//You<sp/>may<sp/>insert<sp/>a<sp/>prinf()<sp/>here<sp/>to<sp/>tell<sp/>you<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>function<sp/>gets<sp/>called.<sp/>Testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//is<sp/>CRITICAL!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i--)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[i].destructor_func)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>^^^<sp/>That<sp/>if<sp/>statement<sp/>is<sp/>a<sp/>safeguard...</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>To<sp/>make<sp/>sure<sp/>we<sp/>don&apos;t<sp/>call<sp/>any<sp/>entries<sp/>that<sp/>have<sp/>already<sp/>been<sp/>called<sp/>and<sp/>unset<sp/>at<sp/>runtime.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Those<sp/>will<sp/>contain<sp/>a<sp/>value<sp/>of<sp/>0,<sp/>and<sp/>calling<sp/>a<sp/>function<sp/>with<sp/>value<sp/>0</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>will<sp/>cause<sp/>undefined<sp/>behaviour.<sp/>Remember<sp/>that<sp/>linear<sp/>address<sp/>0,<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>a<sp/>non-virtual<sp/>address<sp/>space<sp/>(physical)<sp/>contains<sp/>the<sp/>IVT<sp/>and<sp/>BDA.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>a<sp/>virtual<sp/>environment,<sp/>the<sp/>kernel<sp/>will<sp/>receive<sp/>a<sp/>page<sp/>fault,<sp/>and<sp/>then<sp/>probably</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>map<sp/>in<sp/>some<sp/>trash,<sp/>or<sp/>a<sp/>blank<sp/>page,<sp/>or<sp/>something<sp/>stupid<sp/>like<sp/>that.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>will<sp/>result<sp/>in<sp/>the<sp/>processor<sp/>executing<sp/>trash,<sp/>and...we<sp/>don&apos;t<sp/>want<sp/>that.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[i].<ref refid="d7/d5c/a19339_1a665175c477008154e9b40ef96a8d81c2" kindref="member">destructor_func</ref>)(<ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[i].obj_ptr);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i--)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>ABI<sp/>states<sp/>that<sp/>multiple<sp/>calls<sp/>to<sp/>the<sp/>__cxa_finalize(destructor_func_ptr)<sp/>function</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>should<sp/>not<sp/>destroy<sp/>objects<sp/>multiple<sp/>times.<sp/>Only<sp/>one<sp/>call<sp/>is<sp/>needed<sp/>to<sp/>eliminate<sp/>multiple</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>entries<sp/>with<sp/>the<sp/>same<sp/>address.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>FIXME:</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>presents<sp/>the<sp/>obvious<sp/>problem:<sp/>all<sp/>destructors<sp/>must<sp/>be<sp/>stored<sp/>in<sp/>the<sp/>order<sp/>they</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>were<sp/>placed<sp/>in<sp/>the<sp/>list.<sp/>I.e:<sp/>the<sp/>last<sp/>initialized<sp/>object&apos;s<sp/>destructor<sp/>must<sp/>be<sp/>first</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>list<sp/>of<sp/>destructors<sp/>to<sp/>be<sp/>called.<sp/>But<sp/>removing<sp/>a<sp/>destructor<sp/>from<sp/>the<sp/>list<sp/>at<sp/>runtime</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>creates<sp/>holes<sp/>in<sp/>the<sp/>table<sp/>with<sp/>unfilled<sp/>entries.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Remember<sp/>that<sp/>the<sp/>insertion<sp/>algorithm<sp/>in<sp/>__cxa_atexit<sp/>simply<sp/>inserts<sp/>the<sp/>next<sp/>destructor</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>table.<sp/>So,<sp/>we<sp/>have<sp/>holes<sp/>with<sp/>our<sp/>current<sp/>algorithm</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>should<sp/>be<sp/>modified<sp/>to<sp/>move<sp/>all<sp/>the<sp/>destructors<sp/>above<sp/>the<sp/>one<sp/>currently</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>being<sp/>called<sp/>and<sp/>removed<sp/>one<sp/>place<sp/>down<sp/>in<sp/>the<sp/>list,<sp/>so<sp/>as<sp/>to<sp/>cover<sp/>up<sp/>the<sp/>hole.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Otherwise,<sp/>whenever<sp/>a<sp/>destructor<sp/>is<sp/>called<sp/>and<sp/>removed,<sp/>an<sp/>entire<sp/>space<sp/>in<sp/>the<sp/>table<sp/>is<sp/>wasted.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[i].destructor_func<sp/>==<sp/>f)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>in<sp/>the<sp/>next<sp/>line,<sp/>not<sp/>every<sp/>destructor<sp/>function<sp/>is<sp/>a<sp/>class<sp/>destructor.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>perfectly<sp/>legal<sp/>to<sp/>register<sp/>a<sp/>non<sp/>class<sp/>destructor<sp/>function<sp/>as<sp/>a<sp/>simple<sp/>cleanup</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>function<sp/>to<sp/>be<sp/>called<sp/>on<sp/>program<sp/>termination,<sp/>in<sp/>which<sp/>case,<sp/>it<sp/>would<sp/>not<sp/>NEED<sp/>an</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>object<sp/>This<sp/>pointer.<sp/>A<sp/>smart<sp/>programmer<sp/>may<sp/>even<sp/>take<sp/>advantage<sp/>of<sp/>this<sp/>and<sp/>register</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>C<sp/>function<sp/>in<sp/>the<sp/>table<sp/>with<sp/>the<sp/>address<sp/>of<sp/>some<sp/>structure<sp/>containing<sp/>data<sp/>about</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>what<sp/>to<sp/>clean<sp/>up<sp/>on<sp/>exit.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>the<sp/>case<sp/>of<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>no<sp/>arguments,<sp/>it<sp/>will<sp/>simply<sp/>be<sp/>ignore<sp/>within<sp/>the</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>function<sp/>itself.<sp/>No<sp/>worries.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[i].<ref refid="d7/d5c/a19339_1a665175c477008154e9b40ef96a8d81c2" kindref="member">destructor_func</ref>)(<ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[i].obj_ptr);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/dcc/a18350_1a05a64060e9039acf0ba3c311b2d981b7" kindref="member">__atexit_funcs</ref>[i].<ref refid="d7/d5c/a19339_1a665175c477008154e9b40ef96a8d81c2" kindref="member">destructor_func</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Notice<sp/>that<sp/>we<sp/>didn&apos;t<sp/>decrement<sp/>__atexit_func_count:<sp/>this<sp/>is<sp/>because<sp/>this<sp/>algorithm</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>requires<sp/>patching<sp/>to<sp/>deal<sp/>with<sp/>the<sp/>FIXME<sp/>outlined<sp/>above.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="libk_src/essential/kicxxabi.cpp"/>
  </compounddef>
</doxygen>
