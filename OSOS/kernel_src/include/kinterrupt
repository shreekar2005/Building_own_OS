#ifndef __KINTERRUPT_H

    #define __KINTERRUPT_H
    #include <cstdint>
    #include "kiostream"
    #include "kport"
    #include "kgdt"

    extern "C" {
        // following functions are defined in kinterruptstub.s
        void ignoreInterruptRequest();
        void handleInterruptRequest0x00(); // Timer
        void handleInterruptRequest0x01(); // Keyboard
        void handleInterruptRequest0x0C(); // PS/2 Mouse 
    }

    class IDT_row{
        private:
            uint16_t handlerAddressLowbits;
            uint16_t kernelCodeSegmentSelector;
            uint8_t reserved;
            uint8_t access;
            uint16_t handlerAddressHighbits;
        public:
            IDT_row();
            ~IDT_row();
            friend class InterruptManager;
    }__attribute__((packed));

    
    class InterruptManager{
        public :
            uint16_t limit;
            uint32_t base;
        protected:
            IDT_row interruptDescriptorTable[256];
            void setIDTEntry(
                uint8_t interruptNumber,
                uint16_t codeSegmentSelectorOffset,
                void (*handler)(),
                uint8_t DescriptorPrivilegeLever,
                uint8_t DescriptorType);
                
            static Port8BitSlow picMasterCommand;
            static Port8BitSlow picMasterData;
            static Port8BitSlow picSlaveCommand;
            static Port8BitSlow picSlaveData;    
            static InterruptManager* activeInterruptManager;
        public:
            InterruptManager(GDT* gdt);
            ~InterruptManager();
            void installTable();
            uintptr_t DoHandleInterrupt(uint8_t interruptNumber, uintptr_t esp);

            static uintptr_t handleInterrupt(uint8_t interruptNumber, uintptr_t esp);
            static void activate();
            static void deactivate();
            static void printLoadedTable();
            static void printLoadedTableHeader();
    };

#endif