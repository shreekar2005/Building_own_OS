#ifndef KERNEL_PORT_H // Using a more standard include guard name
    #define KERNEL_PORT_H
    #include <cstdint>
    #include <kiostream>
    /*
    Base class for all I/O ports
    Initialize with uint16_t portnumber
    */
    class Port {
    protected:
        uint16_t portnumber;
        // making constructor explicit to prevent unintended conversions
        explicit Port(uint16_t portnumber);

    public:
        // A base class with virtual functions MUST have a virtual destructor
        virtual ~Port() = default;
    };

    // --- 8-Bit Ports ---
    
    /*
    Initialize with uint16_t portnumber
    have methods :
    void write(uint8_t data);
    uint8_t read();
    */
    class Port8Bit : public Port {
    public:
        explicit Port8Bit(uint16_t portnumber);
        virtual ~Port8Bit(){};

        virtual void write(uint8_t data);
        uint8_t read();
    };

    /*
    Initialize with uint16_t portnumber
    have methods :
    void write(uint8_t data);
    uint8_t read(); (inherited)
    */
    class Port8BitSlow final : public Port8Bit {
    public:
        explicit Port8BitSlow(uint16_t portnumber);
        ~Port8BitSlow() override = default;

        // Use 'override' to ensure you are correctly overriding a base class function
        void write(uint8_t data) override;
        // read() is inherited from Port8Bit
    };


    // --- 16-Bit Port ---
    /*
    Initialize with uint16_t portnumber
    have methods :
    void write(uint16_t data);
    uint16_t read();
    */
    class Port16Bit final : public Port {
    public:
        explicit Port16Bit(uint16_t portnumber);
        ~Port16Bit() override = default;

        void write(uint16_t data);
        uint16_t read();
    };


    // --- 32-Bit Port ---
    /*
    Initialize with uint16_t portnumber
    have methods :
    void write(uint32_t data);
    uint32_t read();
    */
    class Port32Bit final : public Port {
    public:
        explicit Port32Bit(uint16_t portnumber);
        ~Port32Bit() override = default;

        void write(uint32_t data);
        uint32_t read();
    };

#endif // KERNEL_PORT_H
